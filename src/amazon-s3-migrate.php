<?php
/* ==================================================================================================================
SCRIPT: 'wp_offload_media_db_migrate.php'
VERSION: 1.0.3
DESCRIPTION: The purpose of this script is to migrate a WordPress database so that existing media items are served from
Amazon S3 or CloudFront. WP Offload Media Lite works great for new media, but some hacking is required to support media
added *before* you started using it.

**** IMPORTANT NOTES REGARDING THIS SCRIPT ****
- This script is NOT FULLY TESTED!
- This script requires PHP version >= 5.6
- This script has NOT BEEN TESTED ON WINDOWS servers.
- The WP Offload Media Lite plugin must be installed and activated on the site.
- Put this file in your WordPress root directory, or where ever the wp-config.php file is.
- This script does NOT upload any media - you must manually upload the media BEFORE running this script.
- Place additional configuration options in wp_offload_media_db_migrate.json, and place it in the SAME directory as this script.
- *Tested on WP 5.0.2, PHP 7.2.11 AND WP Offload Media Lite 2.0.1*

**** IMPORTANT NOTES REGARDING $purge_amazonS3_info variable ****
- $purge_amazonS3_info is set to FALSE by default, and this is the recommended setting.
- You can override this by defining "purge_amazonS3_info": true in the JSON configuration file.
- Only set to TRUE if you fully understand the implications of doing so!
- When $purge_amazonS3_info is TRUE, ALL existing 'amazonS3_info' meta data will be deleted from the database, prior to
  running the migration AND also during a "revert".

Usually, you would only set $purge_amazonS3_info set to TRUE if:
    1. There is no amazonS3_info meta data in the database (i.e. no media has been added since activating WP Offload Media Lite) ** OR **
    2. The WP Offload Media Lite cache busting option "Object Versioning" is OFF (in which case it's usually safe to delete
       existing meta data and allow it to be regenerated by this script, provided you haven't changed the object prefix) ** OR **
    3. You intend to perform a "revert" and you want to remove ALL amazonS3_info meta data from the database.

**** IMPORTANT CONSIDERATIONS IF YOU REMOVE MEDIA FROM THE LOCAL SERVER ****
1. If you perform a "revert", with $purge_amazonS3_info set to FALSE:
    - No amazonS3_info meta data will be removed from the database.
    - To complete the "revert", you will need to disable the WP Offload Media Lite setting "Rewrite File URLs" or
      deactivate the plugin.
    - If you do this, WORDPRESS MEDIA URL REFERENCES WILL BE BROKEN.
2. If you:
    - You perform a "revert" with $purge_amazonS3_info set to TRUE ** OR **
    - You disable "Rewrite File URLs" in WP Offload Media Lite settings ** OR **
    - You deactivate WP Offload Media Lite.
    - If you do any of the above, WORDPRESS MEDIA URL REFERENCES WILL BE BROKEN.

If any of the above apply, you will need to manually copy the affected media back to the local server.

 **** INSTRUCTIONS ****
1) TURN OFF CACHING.  Re-enable it after everything is done.
2) Install and configure the WP Offload Media Lite plugin
3) Manually upload Media Library contents to the bucket you configured in WP Offload Media Lite (including the object prefix)
4) Run this script
================================================================================================================== */

/*=========================================================================
=            Test for required files, plugins, PHP version etc            =
=========================================================================*/

if (php_sapi_name() != 'cli') {
  echo "ERROR: This script must run from CLI";
  exit(2);
}

// Test for required PHP version
$php_required_version ="5.5";
if ( version_compare( PHP_VERSION, $php_required_version, '<' ) ) {
    echo "ERROR: PHP version $php_required_version or higher required.";
    exit(1);
}
// Test for presence of wp-config.php
if ( file_exists( __DIR__ . "/wp-config.php") ) {
    require_once 'wp-config.php';
    // Test for WP Offload S3 plugin
    if ( ! class_exists( 'Amazon_S3_And_CloudFront' ) ) {
        echo "ERROR: WP Offload Media Lite plugin is not active!";
        exit(1);
    }
} else {
    echo "ERROR: wp-config.php file could not be found. This script must be run from the same directory as the file.";
    exit(1);
}

/*----------  Set database credentials  ----------*/
$db_host     = $wpdb->dbhost;
$db_name     = $wpdb->dbname;
$db_user     = $wpdb->dbuser;
$db_password = $wpdb->dbpassword;

/*=================================================
=              Set script parameters              =
=================================================*/
$s3_bucket           = $as3cf->get_setting('bucket');
$s3_region           = ($as3cf->get_setting('region')) ? $as3cf->get_setting('region') : $as3cf->get_bucket_region($as3cf->get_setting('bucket'));
if ($as3cf->get_setting('domain') === "cloudfront" && $as3cf->get_setting('cloudfront') ) {
    $aws_url = $as3cf->get_setting('cloudfront');
} else {
    $aws_url = 's3-' . $s3_region . '.amazonaws.com/' . $as3cf->get_setting('bucket') ;
}
$wp_folder_prefix    = str_replace( ABSPATH, '', wp_upload_dir()['basedir'] ) . '/';
$aws_folder_prefix   = $as3cf->get_setting('enable-object-prefix') ? $as3cf->get_setting('object-prefix') : $wp_folder_prefix;
$use_https           = TRUE;  // can be overwritten in the JSON configuration file
$purge_amazonS3_info = FALSE; // delete ALL existing amazonS3_info meta data

/*====================================================================
=            Get additional settings from the config file            =
====================================================================*/
// Any variables can be over written by including them in the JSON configuration file
// Check for config json file
$config_file = pathinfo(__FILE__, PATHINFO_FILENAME) . '.json';
if ( file_exists( $config_file ) ) {
    $script_config = json_decode( file_get_contents( $config_file ), true );
    // assign script_config values to variables
    foreach ($script_config as $var => $value) {
        $$var = $value;
    }
    // convert JSON values to booleans and apply default if JSON value === ""
    $use_https           = $use_https === "" ? TRUE : boolval($use_https);
    $purge_amazonS3_info = $purge_amazonS3_info === "" ? FALSE : boolval($purge_amazonS3_info);
} else {
    echo 'WARNING: Configuration file not found. All settings will be taken from WP Offload S3 Lite.';
}

/*===================================================
=            Check for required settings            =
===================================================*/
if ( ! $s3_bucket || ! $s3_region ) {
    echo "WARNING: WP Offload S3 Lite setup  appears to be incomplete.";
    exit(1);
}

// ensure folder prefixes have trailing slash
$aws_folder_prefix = rtrim($aws_folder_prefix, '/') . '/';
// set the protocol
$protocol = (boolval($use_https)) ? 'https://' : 'http://';

/*============================================================
=             Migrate DB to serve media from AWS             =
============================================================*/

// Delete any existing 'amazonS3_info' meta data from the database
if ( $purge_amazonS3_info === TRUE ) {
    $wpdb->delete($table_prefix . 'postmeta',
        array(
            'meta_key' => 'amazonS3_info',
        )
    );
}

/*=======================================================
=            Add meta data for Media Library            =
=======================================================*/
// Grab the attachments from the database, we need the meta_value (image name), and the parent post ID
$media_to_update = $wpdb->get_results("SELECT * FROM " . $table_prefix . "postmeta WHERE meta_key = '_wp_attached_file'");
// loop through each media item, adding the amazonS3_info meta data
foreach ($media_to_update as $media_item) {
    $media_meta_data = serialize(
        array(
            'bucket' => $s3_bucket,
            'key'    => $aws_folder_prefix . $media_item->meta_value,
            'region' => $s3_region,
        ));
    // Insert the postmeta record that WP Offload S3 Lite uses
    $wpdb->insert($table_prefix . 'postmeta',
        array(
            'post_id'    => $media_item->post_id,
            'meta_key'   => 'amazonS3_info',
            'meta_value' => $media_meta_data,
        )
    );
}

/*============================================
=            Rewrite post content            =
============================================*/
// Set up database queries
if ($db_connection = mysqli_connect($db_host, $db_user, $db_password, $db_name)) {
    // Query to update post content 'href'
    $query_post_content_href = updatePostContent(
        'href',
        $table_prefix . 'posts',
        get_site_url($wpdb->blogid) . '/' . $wp_folder_prefix,
        "$protocol$aws_url/$aws_folder_prefix"
    );
    // Query to update post content 'src'
    $query_post_content_src = updatePostContent(
        'src',
        $table_prefix . 'posts',
        get_site_url($wpdb->blogid) . '/' . $wp_folder_prefix,
        "$protocol$aws_url/$aws_folder_prefix"
    );

    $db_connection->query($query_post_content_href);

    $db_connection->query($query_post_content_src);
}

exit(0);


/*======================================================
=            Update database 'post_content'            =
======================================================*/
function updatePostContent($type, $table, $local_uri, $aws_uri, $revert = false) {
    $from = (!$revert) ? $local_uri : $aws_uri;
    $to   = (!$revert) ? $aws_uri : $local_uri;
    return "UPDATE $table SET post_content = replace(post_content, '$type=\"$from', '$type=\"$to');";
}

?>